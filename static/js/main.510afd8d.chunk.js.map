{"version":3,"sources":["images/nattu-adnan-unsplash.jpg","API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","components/Stats.styles.ts","components/Stats.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","fetchQuizQuestions","amount","difficulty","a","console","log","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","QuestionCard","callback","questionNr","HandleOnChange","userInput","userInputRef","useRef","className","dangerouslySetInnerHTML","__html","type","placeholder","onChange","e","curr","current","value","id","ref","key","userClicked","disabled","length","onClick","preventDefault","Stats","correctAnswers","hints","incorrectAnswers","HandleOnClose","isClosed","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","hintIsInUse","setHintIsInUse","showStats","setShowStats","questions","setQuestions","number","setNumber","correctUserAnswers","setCorrectUserAnswer","incorrectUserAnswers","setIncorrectUserAnswer","hintsUsed","setHintsUsed","setUserInput","currentQuestion","setQurrentQuestion","currentHint","setCurrentHint","startTrivia","EASY","newQuestions","setViewData","newQuestion","createQuestion","category","movieName","Array","from","reduce","backToString","single_character","toggleStats","prev","answer","currentTarget","trim","toLowerCase","nextQ","setDataForNextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.510afd8d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nattu-adnan-unsplash.c11f97a3.jpg\";","import { shuffleArray } from './utils';\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\nexport enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\",\n}\n\nexport type QuestionsState = Question & { answers: string[] };\n\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty): Promise<QuestionsState[]> => {\n  console.log('fetching')\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n  console.log(data)\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\n  }))\n};\n","export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #ebfeff;\n  border-radius: 10px;\n  border: 2px solid #0085a3;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n\n  p {\n    font-size: 1rem;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n\n  :hover {\n    opacity: 0.8;\n  }\n\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    \n  }\n`;\n// button {\n//   cursor: pointer;\n//   user-select: none;\n//   font-size: 0.8rem;\n//   width: 100%;\n//   height: 40px;\n//   margin: 5px 0;\n//   background: ${({ userClicked }) =>\n//     clicked\n//       ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\n//       :  userClicked\n//       ? 'linear-gradient(90deg, #FF5656, #C16868)'\n//       : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n//   border: 3px solid #ffffff;\n//   box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n//   border-radius: 10px;\n//   color: #fff;\n//   text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n// }","import React, {useRef} from 'react';\n// Types\nimport { AnswerObject } from '../App';\n// Styles\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\ntype Props = {\n  question: string;\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  questionNr: number;\n  HandleOnChange: (input: string) => void;\n  userInput: string;\n};\n\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  callback,\n  questionNr,\n  HandleOnChange,\n  userInput\n}) => {\n  const userInputRef = useRef<HTMLInputElement>(null);\n\n\n  const OnChangeHandler = (e: any) => {\n    if(userInputRef!==null){\n      const curr = userInputRef.current;\n      if(curr!==null){\n        const value = curr.value;\n        HandleOnChange(value);\n      }\n    }\n  }\n  const OnSubmitHandler = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    callback(e);\n    if(userInputRef!==null){\n      const curr = userInputRef.current;\n      if(curr!==null){\n        curr.value = '';\n      }\n    }\n  }\n  return (\n  <Wrapper>\n    <p className='number'>\n      Question: {questionNr} \n    </p>\n    <p dangerouslySetInnerHTML={{ __html: question }} />\n    <form >\n        <input type=\"text\"\n        placeholder={'Type your answer here'} \n        onChange={OnChangeHandler} \n        id=\"user_input\"\n        ref={userInputRef}\n        />\n         <div>\n        <ButtonWrapper\n          key={'Check the guess'}\n          userClicked={question === userInput}\n        >\n          <button disabled={userInput.length==0} value={userInput} onClick={OnSubmitHandler}>\n            <span dangerouslySetInnerHTML={{ __html: 'Check the guess' }} />\n          </button>\n        </ButtonWrapper>\n      \n    </div>\n    </form>\n    \n   \n  </Wrapper>\n)};\n\nexport default QuestionCard;\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    \r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\n// Styles\r\nimport { Wrapper, ButtonWrapper } from './Stats.styles';\r\n\r\ntype Props = {\r\n  correctAnswers: number;\r\n  incorrectAnswers: number;\r\n  hints: number;\r\n  HandleOnClose: () => void;\r\n  isClosed:boolean;\r\n};\r\n\r\n\r\n\r\n\r\nconst Stats: React.FC<Props> = ({\r\n    correctAnswers,\r\n    hints,\r\n  incorrectAnswers,\r\n  HandleOnClose,\r\n  isClosed\r\n}) =>  (\r\n  <Wrapper>\r\n    <p className='number'>\r\n       Correct Guesses: {correctAnswers}\r\n    </p>\r\n    <p className='number'>\r\n       Wrong Guesses: {incorrectAnswers}\r\n    </p>\r\n    <p className='number'>\r\n       Hints used: {hints}\r\n    </p>\r\n        <ButtonWrapper\r\n          key={'Hide'}\r\n          userClicked={isClosed}\r\n        >\r\n          <button onClick={HandleOnClose}>\r\n          <span dangerouslySetInnerHTML={{ __html: 'Hide Statisrics' }} />\r\n          </button>\r\n        </ButtonWrapper>\r\n      \r\n    \r\n\r\n    \r\n   \r\n  </Wrapper>\r\n);\r\n\r\nexport default Stats;","import styled, { createGlobalStyle } from 'styled-components';\nimport BGImage from './images/nattu-adnan-unsplash.jpg';\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    height: 100%;\n  }\n\n  body {\n    background-image: url(${BGImage});\n    background-size: cover;\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n  }\n\n  * {\n    font-family: 'Catamaran', sans-serif;\n    box-sizing: border-box;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  > p {\n    color: #fff;\n  }\n\n  .score {\n    color: #fff;\n    font-size: 2rem;\n    margin: 0;\n  }\n\n  h1 {\n    font-family: Fascinate Inline;\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\n    font-weight: 400;\n    background-size: 100%;\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    -moz-background-clip: text;\n    -moz-text-fill-color: transparent;\n    filter: drop-shadow(2px 2px #0085a3);\n    font-size: 70px;\n    text-align: center;\n    margin: 20px;\n  }\n\n  .start, .next {\n    cursor: pointer;\n    background: linear-gradient(180deg, #ffffff, #ffcc91);\n    border: 2px solid #d38558;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius: 10px;\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n\n  .start {\n    max-width: 200px;\n  }\n`;\n","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API';\n// Components\nimport QuestionCard from './components/QuestionCard';\nimport Stats from './components/Stats';\n\n// types\nimport { QuestionsState, Difficulty } from './API';\n// Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\n\nconst App: React.FC = () => {\n  //switches\n  const [loading, setLoading] = useState(false);\n  const [hintIsInUse, setHintIsInUse] = useState(false);\n  const [showStats, setShowStats] = useState(false);\n\n  //data\n  const [questions, setQuestions] = useState<QuestionsState[]>([]);\n  //counters\n  const [number, setNumber] = useState(0);\n  const [correctUserAnswers, setCorrectUserAnswer] = useState(0);\n  const [incorrectUserAnswers, setIncorrectUserAnswer] = useState(0);\n  const [hintsUsed, setHintsUsed] = useState(0);\n  //view\n  const [userInput, setUserInput] = useState('');\n  const [currentQuestion, setQurrentQuestion] = useState('');\n  const [currentHint, setCurrentHint] = useState('');\n\n  const startTrivia = async () => {\n    setLoading(true);\n    const newQuestions = await fetchQuizQuestions(\n     10,\n      Difficulty.EASY\n    );\n    setShowStats(false);\n    setHintIsInUse(false);\n    setQuestions(newQuestions);\n    setCorrectUserAnswer(0);\n    setIncorrectUserAnswer(0);\n    setNumber(0);\n    setHintsUsed(0);\n    if(!!newQuestions[0]) setViewData(newQuestions[0]);\n    setLoading(false);\n    \n  };\n\n  const setDataForNextQuestion = () => {\n    // Move on to the next question if not the last question\n    const nextQ = number + 1;\n    setNumber(nextQ);\n    setViewData(questions[nextQ]);\n  };\n\n  const setViewData = (question: QuestionsState) => {\n    //reset display data for new question\n    \n    const newQuestion = createQuestion(question.correct_answer);\n    setQurrentQuestion(() => newQuestion);\n    setCurrentHint(()=>question.category);\n    setHintIsInUse(()=>false);\n  }\n\n  const createQuestion = (movieName: string): string => {\n    const stringInCharacters = Array.from(movieName);\n    \n   return stringInCharacters.reduce((backToString,single_character)=>{\n     if(single_character === ' ') return backToString + ' ';\n     return backToString + (Math.random()<0.6?single_character:'_')\n    });\n  };\n\n  const HandleUserInput = (e:string) => {\n    setUserInput(e);\n  }\n\n  const checkAnswer = (e: any) => {\n      // User's answer\n      const answer = e.currentTarget.value.trim();\n      // Check answer against correct answer\n      const correct = questions[number].correct_answer.toLowerCase() === answer.toLowerCase();\n      // Add score if answer is correct\n      if (correct) {\n        setCorrectUserAnswer((prev) =>  prev + 1);\n        setDataForNextQuestion();\n      }\n      else {  \n        setIncorrectUserAnswer((prev) => prev + 1)\n      };\n      setUserInput((prev) => '');\n  };\n\n  const useHint = () => {\n    setHintIsInUse(()=>true);\n    setHintsUsed((prev)=> prev + 1);\n  };\n\n  const toggleStats = () => {\n    setShowStats((prev)=>!prev);\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>TV Trivia</h1>\n        {questions.length === 0 && !loading ? (\n          <button className='start' onClick={startTrivia}>\n            Start\n          </button>\n        ) : null}\n        \n        {loading ? <p>Loading Questions...</p> : null}\n        {questions.length === 0 ||!loading && (\n          <QuestionCard\n            questionNr={number + 1}\n            question={currentQuestion}\n            callback={checkAnswer}\n            HandleOnChange={HandleUserInput}\n            userInput={userInput}\n          />\n        )}\n        {!loading &&  !!questions[number] && !hintIsInUse? (\n          <button className='next' onClick={useHint}>\n            ?\n          </button>\n        ) : null}\n        {hintIsInUse? (\n             <p dangerouslySetInnerHTML={{ __html: currentHint }} />\n        ) : null}\n        {!loading &&  !showStats && questions.length > 0? (\n          <button className='next' onClick={toggleStats}>\n            Show Statistics\n          </button>\n        ) : null}\n        {showStats && <Stats\n          correctAnswers={correctUserAnswers}\n          hints={hintsUsed}\n          incorrectAnswers={incorrectUserAnswers}\n          HandleOnClose={toggleStats}\n          isClosed={!showStats}\n        />}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}